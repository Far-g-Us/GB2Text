"""
GB Text Extraction Framework

ПРЕДУПРЕЖДЕНИЕ ОБ АВТОРСКИХ ПРАВАХ:
Этот программный инструмент предназначен ТОЛЬКО для анализа ROM-файлов,
законно принадлежащих пользователю. Использование этого инструмента для
нелегального копирования, распространения или модификации защищенных
авторским правом материалов строго запрещено.

Этот проект НЕ содержит и НЕ распространяет никакие ROM-файлы или
защищенные авторским правом материалы. Все ROM-файлы должны быть
законно приобретены пользователем самостоятельно.

Этот инструмент разработан исключительно для исследовательских целей,
обучения и реверс-инжиниринга в рамках, разрешенных законодательством.
"""

from typing import Dict


def get_generic_english_charmap() -> Dict[int, str]:
    """Базовая английская таблица символов без привязки к конкретным играм"""
    return {
        0x20: ' ', 0x21: '!', 0x22: '"', 0x23: '#', 0x24: '$',
        0x25: '%', 0x26: '&', 0x27: "'", 0x28: '(', 0x29: ')',
        0x2A: '*', 0x2B: '+', 0x2C: ',', 0x2D: '-', 0x2E: '.',
        0x2F: '/',
        0x30: '0', 0x31: '1', 0x32: '2', 0x33: '3', 0x34: '4',
        0x35: '5', 0x36: '6', 0x37: '7', 0x38: '8', 0x39: '9',
        0x3A: ':', 0x3B: ';', 0x3C: '<', 0x3D: '=', 0x3E: '>',
        0x3F: '?',
        0x40: '@', 0x41: 'A', 0x42: 'B', 0x43: 'C', 0x44: 'D',
        0x45: 'E', 0x46: 'F', 0x47: 'G', 0x48: 'H', 0x49: 'I',
        0x4A: 'J', 0x4B: 'K', 0x4C: 'L', 0x4D: 'M', 0x4E: 'N',
        0x4F: 'O',
        0x50: 'P', 0x51: 'Q', 0x52: 'R', 0x53: 'S', 0x54: 'T',
        0x55: 'U', 0x56: 'V', 0x57: 'W', 0x58: 'X', 0x59: 'Y',
        0x5A: 'Z', 0x5B: '[', 0x5C: '\\', 0x5D: ']', 0x5E: '^',
        0x5F: '_',
        0x60: '`', 0x61: 'a', 0x62: 'b', 0x63: 'c', 0x64: 'd',
        0x65: 'e', 0x66: 'f', 0x67: 'g', 0x68: 'h', 0x69: 'i',
        0x6A: 'j', 0x6B: 'k', 0x6C: 'l', 0x6D: 'm', 0x6E: 'n',
        0x6F: 'o',
        0x70: 'p', 0x71: 'q', 0x72: 'r', 0x73: 's', 0x74: 't',
        0x75: 'u', 0x76: 'v', 0x77: 'w', 0x78: 'x', 0x79: 'y',
        0x7A: 'z', 0x7B: '{', 0x7C: '|', 0x7D: '}', 0x7E: '~',
        0xFF: '[END]'
    }


def get_generic_japanese_charmap() -> Dict[int, str]:
    """Базовая японская таблица символов без привязки к конкретным играм"""
    # Включает ТОЛЬКО базовые символы, без специфичных для игр элементов
    return {
        0x20: ' ', 0x21: '!', 0x22: '"', 0x23: '#', 0x24: '$',
        0x25: '%', 0x26: '&', 0x27: "'", 0x28: '(', 0x29: ')',
        0x2A: '*', 0x2B: '+', 0x2C: ',', 0x2D: '-', 0x2E: '.',
        0x2F: '/',
        0x30: '0', 0x31: '1', 0x32: '2', 0x33: '3', 0x34: '4',
        0x35: '5', 0x36: '6', 0x37: '7', 0x38: '8', 0x39: '9',
        0x3A: ':', 0x3B: ';', 0x3C: '<', 0x3D: '=', 0x3E: '>',
        0x3F: '?',
        0x40: '@', 0x41: 'A', 0x42: 'B', 0x43: 'C', 0x44: 'D',
        0x45: 'E', 0x46: 'F', 0x47: 'G', 0x48: 'H', 0x49: 'I',
        0x4A: 'J', 0x4B: 'K', 0x4C: 'L', 0x4D: 'M', 0x4E: 'N',
        0x4F: 'O',
        0x50: 'P', 0x51: 'Q', 0x52: 'R', 0x53: 'S', 0x54: 'T',
        0x55: 'U', 0x56: 'V', 0x57: 'W', 0x58: 'X', 0x59: 'Y',
        0x5A: 'Z', 0x5B: '[', 0x5C: '\\', 0x5D: ']', 0x5E: '^',
        0x5F: '_',
        0x60: '`', 0x61: 'a', 0x62: 'b', 0x63: 'c', 0x64: 'd',
        0x65: 'e', 0x66: 'f', 0x67: 'g', 0x68: 'h', 0x69: 'i',
        0x6A: 'j', 0x6B: 'k', 0x6C: 'l', 0x6D: 'm', 0x6E: 'n',
        0x6F: 'o',
        0x70: 'p', 0x71: 'q', 0x72: 'r', 0x73: 's', 0x74: 't',
        0x75: 'u', 0x76: 'v', 0x77: 'w', 0x78: 'x', 0x79: 'y',
        0x7A: 'z', 0x7B: '{', 0x7C: '|', 0x7D: '}', 0x7E: '~',

        # Базовые японские символы (только общие, без привязки к играм)
        0xA1: '。', 0xA2: '、', 0xA3: '・', 0xA4: 'ヲ',
        0xA5: 'ー', 0xA6: '「', 0xA7: '」', 0xA8: '¥',
        0xA9: '＄', 0xAA: '％', 0xAB: '＊', 0xAC: '，',
        0xAD: '．', 0xAE: '：', 0xAF: '；', 0xB0: '？',
        0xB1: '！', 0xB2: '゛', 0xB3: '゜', 0xB4: '´',
        0xB5: '｀', 0xB6: '＾', 0xB7: '＿', 0xB8: '¨',
        0xB9: '￣', 0xBA: 'ヽ', 0xBB: 'ヾ', 0xBC: 'ゝ',
        0xBD: 'ゞ', 0xBE: 'ー', 0xBF: 'ア',
        0xC0: 'イ', 0xC1: 'ウ', 0xC2: 'エ', 0xC3: 'オ',
        0xC4: 'カ', 0xC5: 'キ', 0xC6: 'ク', 0xC7: 'ケ',
        0xC8: 'コ', 0xC9: 'サ', 0xCA: 'シ', 0xCB: 'ス',
        0xCC: 'セ', 0xCD: 'ソ', 0xCE: 'タ', 0xCF: 'チ',
        0xD0: 'ツ', 0xD1: 'テ', 0xD2: 'ト', 0xD3: 'ナ',
        0xD4: 'ニ', 0xD5: 'ヌ', 0xD6: 'ネ', 0xD7: 'ノ',
        0xD8: 'ハ', 0xD9: 'ヒ', 0xDA: 'フ', 0xDB: 'ヘ',
        0xDC: 'ホ', 0xDD: 'マ', 0xDE: 'ミ', 0xDF: 'ム',
        0xE0: 'メ', 0xE1: 'モ', 0xE2: 'ヤ', 0xE3: 'ユ',
        0xE4: 'ヨ', 0xE5: 'ラ', 0xE6: 'リ', 0xE7: 'ル',
        0xE8: 'レ', 0xE9: 'ロ', 0xEA: 'ワ', 0xEB: 'ン',
        0xEC: 'ァ', 0xED: 'ィ', 0xEE: 'ゥ', 0xEF: 'ェ',
        0xF0: 'ォ', 0xF1: 'ャ', 0xF2: 'ュ', 0xF3: 'ョ',
        0xF4: 'ッ', 0xF5: 'ー', 0xF6: 'ア', 0xF7: 'イ',
        0xF8: 'ウ', 0xF9: 'エ', 0xFA: 'オ', 0xFB: 'カ',
        0xFC: 'キ', 0xFD: 'ク', 0xFE: 'ケ', 0xFF: '[END]'
    }


def get_generic_russian_charmap() -> Dict[int, str]:
    """Базовая русская таблица символов без привязки к конкретным играм"""
    # Создаем на основе английской, добавляя кириллицу в свободные слоты
    charmap = get_generic_english_charmap().copy()

    # Добавляем кириллицу в свободные слоты (0xA0-0xDF)
    cyrillic = {
        0xA0: 'А', 0xA1: 'Б', 0xA2: 'В', 0xA3: 'Г', 0xA4: 'Д',
        0xA5: 'Е', 0xA6: 'Ж', 0xA7: 'З', 0xA8: 'И', 0xA9: 'Й',
        0xAA: 'К', 0xAB: 'Л', 0xAC: 'М', 0xAD: 'Н', 0xAE: 'О',
        0xAF: 'П',
        0xB0: 'Р', 0xB1: 'С', 0xB2: 'Т', 0xB3: 'У', 0xB4: 'Ф',
        0xB5: 'Х', 0xB6: 'Ц', 0xB7: 'Ч', 0xB8: 'Ш', 0xB9: 'Щ',
        0xBA: 'Ъ', 0xBB: 'Ы', 0xBC: 'Ь', 0xBD: 'Э', 0xBE: 'Ю',
        0xBF: 'Я',
        0xC0: 'а', 0xC1: 'б', 0xC2: 'в', 0xC3: 'г', 0xC4: 'д',
        0xC5: 'е', 0xC6: 'ж', 0xC7: 'з', 0xC8: 'и', 0xC9: 'й',
        0xCA: 'к', 0xCB: 'л', 0xCC: 'м', 0xCD: 'н', 0xCE: 'о',
        0xCF: 'п',
        0xD0: 'р', 0xD1: 'с', 0xD2: 'т', 0xD3: 'у', 0xD4: 'ф',
        0xD5: 'х', 0xD6: 'ц', 0xD7: 'ч', 0xD8: 'ш', 0xD9: 'щ',
        0xDA: 'ъ', 0xDB: 'ы', 0xDC: 'ь', 0xDD: 'э', 0xDE: 'ю',
        0xDF: 'я'
    }

    # Объединяем с английской таблицей
    charmap.update(cyrillic)
    return charmap


def auto_detect_charmap(rom_data: bytes, start: int = 0, length: int = 1000) -> Dict[int, str]:
    """
    Автоматическое определение возможной таблицы символов.
    Пользователь должен проверить и скорректировать результат.
    """
    # Анализ статистики использования байтов
    freq = {}
    for i in range(start, min(start + length, len(rom_data))):
        byte = rom_data[i]
        freq[byte] = freq.get(byte, 0) + 1

    # Определение вероятных пробелов и терминаторов
    common_bytes = sorted(freq.items(), key=lambda x: x[1], reverse=True)

    charmap = {}
    # Предполагаем, что самый частый символ - пробел
    if common_bytes:
        charmap[common_bytes[0][0]] = ' '

    # Добавляем ASCII символы для известных диапазонов
    for byte in range(0x20, 0x7F):
        if byte in rom_data[start:start + length]:
            charmap[byte] = chr(byte)

    # Добавляем терминаторы
    for byte, count in common_bytes[:5]:
        if count > 10:  # Порог для терминатора
            if byte not in charmap:
                charmap[byte] = f'[TERM_{byte:02X}]'

    return charmap