"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è exe —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ GB2Text
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def create_exe():
    """–°–æ–∑–¥–∞–µ—Ç exe —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è PyInstaller"""
    
    print("üî® –°–æ–∑–¥–∞–Ω–∏–µ exe —Ñ–∞–π–ª–∞ –¥–ª—è GB2Text...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PyInstaller
    try:
        import PyInstaller
        print("‚úÖ PyInstaller –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    current_dir = Path(__file__).parent.parent
    gb2text_dir = None
    
    # –ò—â–µ–º –ø–∞–ø–∫—É GB2Text –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö
    for path in [current_dir, current_dir.parent, current_dir.parent.parent]:
        potential_gb2text = path / "GB2Text"
        if potential_gb2text.exists() and (potential_gb2text / "main.py").exists():
            gb2text_dir = potential_gb2text
            break
    
    if not gb2text_dir:
        print("‚ùå –ü–∞–ø–∫–∞ GB2Text —Å main.py –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –≤:")
        for path in [current_dir, current_dir.parent, current_dir.parent.parent]:
            print(f"   - {path / 'GB2Text'}")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ GB2Text: {gb2text_dir}")
    
    main_script = gb2text_dir / "main.py"
    dist_dir = gb2text_dir / "dist"
    build_dir = gb2text_dir / "build"
    
    required_folders = ['plugins', 'locales', 'settings', 'resources', 'gui', 'core']
    existing_folders = []
    
    for folder in required_folders:
        folder_path = gb2text_dir / folder
        if folder_path.exists():
            existing_folders.append(folder)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
        else:
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    if dist_dir.exists():
        shutil.rmtree(dist_dir)
    if build_dir.exists():
        shutil.rmtree(build_dir)
    
    versions = [
        {
            'name': 'GB2Text-Debug',
            'console': True,
            'description': '–≤–µ—Ä—Å–∏—è —Å –∫–æ–Ω—Å–æ–ª—å—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏'
        },
        {
            'name': 'GB2Text',
            'console': False,
            'description': '—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏'
        }
    ]

    debug_wrapper_content = '''
import sys
import traceback
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
log_file = Path(__file__).parent / "gb2text_debug.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

try:
    logging.info("–ó–∞–ø—É—Å–∫ GB2Text Debug –≤–µ—Ä—Å–∏–∏...")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    import main

except Exception as e:
    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    logging.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    print(f"\\n‚ùå –û–®–ò–ë–ö–ê: {e}")
    print(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {log_file}")
    print("\\n" + "="*50)
    print("–ü–û–õ–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –û–®–ò–ë–ö–ò:")
    print("="*50)
    traceback.print_exc()
    print("="*50)

finally:
    print("\\nüîç –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter...")
    try:
        input()
    except:
        import time
        time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ input –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
'''

    debug_wrapper_path = gb2text_dir / "debug_main.py"
    with open(debug_wrapper_path, 'w', encoding='utf-8') as f:
        f.write(debug_wrapper_content)

    for version in versions:
        print(f"\nüî® –°–æ–∑–¥–∞–Ω–∏–µ {version['description']}...")
        entry_script = debug_wrapper_path if version['console'] else main_script
        
        cmd = [
            sys.executable, "-m", "PyInstaller",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –º–æ–¥—É–ª—å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
            "--onefile",                    # –û–¥–∏–Ω exe —Ñ–∞–π–ª (–ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π)
            "--clean",                      # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            f"--name={version['name']}",    # –ò–º—è exe —Ñ–∞–π–ª–∞
            "--hidden-import=tkinter",
            "--hidden-import=tkinter.ttk",
            "--hidden-import=tkinter.scrolledtext",
            "--hidden-import=tkinter.filedialog",
            "--hidden-import=tkinter.messagebox",
            "--hidden-import=json",
            "--hidden-import=logging",
            "--hidden-import=pathlib",
            "--hidden-import=collections",
            "--exclude-module=posix",
            "--exclude-module=pwd",
            "--exclude-module=grp",
            "--exclude-module=fcntl",
            "--exclude-module=resource",
            "--exclude-module=_posixsubprocess",
            "--exclude-module=java",
            "--exclude-module=org",
            "--exclude-module=vms_lib",
            "--exclude-module=_winreg",
            "--exclude-module=matplotlib",
            "--exclude-module=numpy",
            "--exclude-module=pandas",
            "--exclude-module=scipy",
            "--exclude-module=PIL",
            "--exclude-module=cv2",
        ]
        
        if not version['console']:
            cmd.append("--windowed")

        version_file = gb2text_dir / "VERSION"
        if version_file.exists():
            cmd.extend([f"--add-data={version_file};."])
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª VERSION")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {version_file}")
        
        for folder in existing_folders:
            folder_path = gb2text_dir / folder
            if folder == 'locales':
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π JSON —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
                locales_files = list(folder_path.glob('*.json'))
                for locale_file in locales_files:
                    cmd.extend([f"--add-data={locale_file};locales/"])
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {len(locales_files)} —Ñ–∞–π–ª–æ–≤")
            else:
                cmd.extend([f"--add-data={folder_path};{folder}"])
        
        icon_path = gb2text_dir / "resources" / "app_icon.ico"
        if icon_path.exists():
            cmd.append(f"--icon={icon_path}")
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞")
        else:
            print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
        
        cmd.append(str(entry_script))
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(str(x) for x in cmd)}")
        
        try:
            print(f"üîß –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {gb2text_dir}")
            print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(str(x) for x in cmd)}")
            
            result = subprocess.run(cmd, cwd=gb2text_dir, capture_output=True, text=True)
            
            if result.returncode == 0:
                exe_path = dist_dir / f"{version['name']}.exe"
                if exe_path.exists():
                    print(f"‚úÖ {version['description']} —Å–æ–∑–¥–∞–Ω–∞: {exe_path}")
                    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {exe_path.stat().st_size / 1024 / 1024:.1f} MB")
                else:
                    print(f"‚ùå {version['description']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏")
                    print(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist: {list(dist_dir.glob('*')) if dist_dir.exists() else '–ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {version['description']}:")
                print(f"Return code: {result.returncode}")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {version['description']}: {e}")
            print(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

    if debug_wrapper_path.exists():
        debug_wrapper_path.unlink()

    create_portable_package(gb2text_dir, dist_dir)
    
    return True

def create_portable_package(gb2text_dir, dist_dir):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç —Å exe —Ñ–∞–π–ª–æ–º"""
    
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞...")
    
    portable_dir = gb2text_dir.parent / "GB2Text-Portable"
    if portable_dir.exists():
        shutil.rmtree(portable_dir)
    portable_dir.mkdir()
    
    # –ö–æ–ø–∏—Ä—É–µ–º exe —Ñ–∞–π–ª—ã
    for exe_name in ["GB2Text.exe", "GB2Text-Debug.exe"]:
        exe_path = dist_dir / exe_name
        if exe_path.exists():
            shutil.copy2(exe_path, portable_dir / exe_name)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {exe_name}")
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    readme_content = """GB2Text - –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è

–§–ê–ô–õ–´:
- GB2Text.exe - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏)
- GB2Text-Debug.exe - –≤–µ—Ä—Å–∏—è —Å –∫–æ–Ω—Å–æ–ª—å—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–æ–∫

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ GB2Text.exe –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã
2. –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, 
   –∑–∞–ø—É—Å—Ç–∏—Ç–µ GB2Text-Debug.exe —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏

–û–¢–õ–ê–î–ö–ê –û–®–ò–ë–û–ö:
- Debug –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª gb2text_debug.log —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
- –ö–æ–Ω—Å–æ–ª—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞
- –í—Å–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- Windows 7/8/10/11
- –ù–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
- –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ exe

–ü–û–î–î–ï–†–ñ–ö–ê:
- –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ Debug –≤–µ—Ä—Å–∏—é
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –∏–ª–∏ gb2text_debug.log –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""
    
    with open(portable_dir / "README.txt", 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print(f"‚úÖ –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {portable_dir}")
    print("üìã –í–∫–ª—é—á–∞–µ—Ç –æ–±–µ –≤–µ—Ä—Å–∏–∏ exe –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

def create_spec_file():
    """–°–æ–∑–¥–∞–µ—Ç .spec —Ñ–∞–π–ª –¥–ª—è –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    current_dir = Path(__file__).parent.parent
    gb2text_dir = None
    
    for path in [current_dir, current_dir.parent, current_dir.parent.parent]:
        potential_gb2text = path / "GB2Text"
        if potential_gb2text.exists() and (potential_gb2text / "main.py").exists():
            gb2text_dir = potential_gb2text
            break
    
    if not gb2text_dir:
        print("‚ùå –ü–∞–ø–∫–∞ GB2Text –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è spec —Ñ–∞–π–ª–∞!")
        return
    
    folders_to_include = []
    for folder in ['plugins', 'locales', 'settings', 'resources', 'gui', 'core']:
        folder_path = gb2text_dir / folder
        if folder_path.exists():
            folders_to_include.append(f"        ('{folder}', '{folder}'),")
    
    spec_content = f'''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
{chr(10).join(folders_to_include)}
    ],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'tkinter.scrolledtext',
        'tkinter.filedialog',
        'tkinter.messagebox',
        'json',
        'logging',
        'pathlib',
        'collections',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[
        'posix',
        'pwd',
        'grp',
        'fcntl',
        'resource',
        '_posixsubprocess',
        'java',
        'org',
        'vms_lib',
        '_winreg',
        'matplotlib',
        'numpy',
        'pandas',
        'scipy',
        'PIL',
        'cv2',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='GB2Text',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    cofile=None,
    icon='resources/app_icon.ico' if (Path('resources/app_icon.ico').exists()) else None,
)
'''

    spec_path = gb2text_dir / 'GB2Text.spec'
    with open(spec_path, 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª GB2Text.spec –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏")

if __name__ == "__main__":
    print("GB2Text - –°–æ–∑–¥–∞–Ω–∏–µ exe —Ñ–∞–π–ª–∞")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º spec —Ñ–∞–π–ª
    create_spec_file()
    
    # –°–æ–∑–¥–∞–µ–º exe
    success = create_exe()
    
    if success:
        print("\nüéâ Exe —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print("üìÅ –ù–∞–π—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ –≤ –ø–∞–ø–∫–µ dist/")
        print("\nüí° –°–æ–≤–µ—Ç—ã:")
        print("- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ exe –Ω–∞ –¥—Ä—É–≥–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–Ω—ã–º–∏ ROM —Ñ–∞–π–ª–∞–º–∏")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å exe —Ñ–∞–π–ª")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("- –û–±–Ω–æ–≤–∏—Ç—å PyInstaller: pip install --upgrade pyinstaller")
        print("- –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫")
